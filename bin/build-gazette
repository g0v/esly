#!/usr/bin/env perl
use v5.14;
package PassionFruit;
use File::Next;
use File::Slurp qw(read_file);
use Encode qw(decode_utf8 encode_utf8);
use Moose;
use ElasticSearch;
use Markdent;
use Markdent::Parser;
use Markdent::Handler::MinimalTree;
use Markdent::Handler::CaptureEvents;

use Moose::Util::TypeConstraints;

subtype 'LyGazetteSourceDirectory', as 'Str', where {
    my $src = $_;
    -d "$src/raw" or die "$src is not a directory.\n";
    -f "$src/raw/3867.md" or die "$src is not a directory with gazette raw data files.\n";
};

no Moose::Util::TypeConstraints;

has es => (
    is => "ro",
    lazy_build => 1,
    isa => "ElasticSearch"
);

has gazette_source => (
    is => "ro",
    required => 1,
    isa => 'LyGazetteSourceDirectory'
);

has index_name => (
    is => "ro",
    default => sub { "g0vtw" }
);

sub _build_es { return ElasticSearch->new }

sub walk_gazettes {
    my $self = shift;

    $self->create_index;

    my $it = File::Next::files($self->gazette_source);
    while(defined( my $file = $it->() )) {
        next unless $file =~ m!/raw/(?<issue>\d+)\.md$!a;

        my $content = $self->read_gazette($file);
        my $doc = $self->parse_gazette($content);
        $doc->{issue} = $+{issue};
        $self->index_gazette($doc);
    }

    $self->es->optimized_index(
        index => $self->index_name,
        max_num_segments => 1
    );
}

sub parse_gazette {
    my ($self, $text) = @_;

    my $h = Markdent::Handler::CaptureEvents->new;

    my $parser = Markdent::Parser->new(
        dialect => "GitHub",
        handler => $h,
    );

    $parser->parse(markdown => encode_utf8($text));

    my @paragraph_text;
    for my $e ($h->captured_events->events) {
        if ($e->isa("Markdent::Event::Text")) {
            my $t = $e->text;
            if ($t =~ m!\S!) {
                push @paragraph_text, $t;
            }
        }
    }

    return {
        content => join("\n", map { decode_utf8($_) } @paragraph_text)
    }

}

sub read_gazette {
    my ($self, $file) = @_;
    my $content = read_file($file, { binmode => ":utf8" });

    # strip json block
    # $content =~ s!\n [ \t]*```json \n (.+) \n [ \t]*```\n!!gsx;

    return $content;
}

sub create_index {
    my $self = shift;

    my $result = $self->es->index_exists( index => $self->index_name );

    return if ($result && $result->{ok});

    $self->es->create_index(
        index => $self->index_name,
        settings => {
            index => {
                analysis => {
                    filter => {
                        multigram => {
                            type => "shingle",
                            min_shingle_size => 2,
                            max_shingle_size => 2,
                            token_separator => "",
                            output_unigrams => 0,
                            output_unigrams_if_no_shingles => 0
                        }
                    },
                    tokenizer => {
                        zhtw => {
                            type => "ngram",
                            min_gram => 2,
                            max_gram => 5,
                        }
                    },
                    char_filter => {
                        fwspace => {
                            type => "mapping",
                            mappings => ["\x{3000}=>\x{20}"]
                        }
                    },
                    analyzer => {
                        GazetteContentAnalyzer => {
                            type        => "custom",
                            tokenizer   => "zhtw",
                            filter      => ["lowercase", "asciifolding", "trim"],
                            char_filter => ["fwspace", "html_strip"]
                        }
                    }
                },
            }
        },
        mappings => {
            LyGazetteIssue => {
                _id => { "path" => "issue" },
                _source => {
                    compress => 1
                },
                properties => {
                    issue => {
                        type => "integer"
                    },
                    content => {
                        type => "string",
                        store => "yes",
                        analyzer => "GazetteContentAnalyzer"
                    }
                }
            }
        }
    );

    say "Created index: " . $self->index_name;
}

sub index_gazette {
    my ($self, $doc) = @_;

    eval {
        $self->es->index(
            index  => $self->index_name,
            type   => "LyGazetteIssue",
            id     => $doc->{issue},
            data   => $doc,
        );
        say "Issue $doc->{issue} indexed.";
        1;
    }
    or do {
        my $error = $@ || "UNKNOWN";
        print STDERR "Error: " . ref($error) . "\n";
        print STDERR $error;
        print STDERR "issue number = $doc->{issue}\n";
    }
}

package main;
binmode STDOUT, ":utf8";
binmode STDERR, ":utf8";

my $p = PassionFruit->new( gazette_source => $ARGV[0] );

$p->walk_gazettes;
